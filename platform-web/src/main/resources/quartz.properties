#default config
org.quartz.scheduler.instanceName = DefaultQuartzScheduler
org.quartz.scheduler.rmi.export = false
org.quartz.scheduler.rmi.proxy = false
org.quartz.scheduler.wrapJobExecutionInUserTransaction = false
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 10
org.quartz.threadPool.threadPriority = 5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true

#quartz持久化储存配置
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
#驱动代理 mysql
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.MSSQLDelegate
#配置数据库表的前缀
org.quartz.jobStore.tablePrefix = QRTZ_
#数据源名称
org.quartz.jobStore.dataSource = dataSourceName
#"use properties" 标记指示着持久性 JobStore 所有在 JobDataMap 中的值都是字符串，因此能以 名-值 对的形式存储，而不用让更复杂的对象以序列化的形式存入 BLOB 列中。这样会更方便，因为让你避免了发生于序列化你的非字符串的类到 BLOB 时的有关类版本的问题
#ERROR
#org.quartz.jobStore.userProperties = false
#在 Trigger 被认为是错过触发之前，Scheduler 还容许 Trigger 通过它的下次触发时间的毫秒数
org.quartz.jobStore.misfireThreshold = 60000
#设置为 true 打开集群特性。如果你有多个 Quartz 实例在用同一套数据库时，这个属性就必须设置为 true
org.quartz.jobStore.isClustered = false
#设置一个频度(毫秒)，用于实例报告给集群中的其他实例。这会影响到侦测失败实例的敏捷度。它只用于设置了 isClustered 为 true 的时候
org.quartz.jobStore.clusterCheckinInterval = 15000
#这是 JobStore 能处理的错过触发的 Trigger 的最大数量。处理太多(超过两打) 很快会导致数据库表被锁定够长的时间，这样就妨碍了触发别的(还未错过触发) trigger 执行的性能
org.quartz.jobStore.maxMisfiresToHandleAtATime = 20
#设置这个参数为 true 会告诉 Quartz 从数据源获取的连接后不要调用它的 setAutoCommit(false) 方法。这在少些情况下是有帮助的，比如假如你有这样一个驱动，它会抱怨本来就是关闭的又来调用这个方法。这个属性默认值是 false，因为大多数的驱动都要求调用 setAutoCommit(false)
org.quartz.jobStore.dontSetAutoCommitFalse = false
#这必须是一个从 LOCKS 表查询一行并对这行记录加锁的 SQL 语句。假如未设置，默认值就是 SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE，这能在大部分数据库上工作。{0} 会在运行期间被前面你配置的 TABLE_PREFIX 所替换
org.quartz.jobStore.selectWithLockSQL = SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE
#值为 true 时告知 Quartz(当使用 JobStoreTX 或 CMT) 调用 JDBC 连接的 setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE) 方法。这有助于阻止某些数据库在高负载和长时间事物时锁的超时
org.quartz.jobStore.txIsolationLevelSerializable = false

#Quartz Datasource
#JDBC 驱动类的全限名
org.quartz.dataSource.dataSourceName.driver = ${_database.driverClassName}
#接到你的数据库的 URL(主机，端口等)
org.quartz.dataSource.dataSourceName.URL = ${_database.url}
#用于连接你的数据库的用户名
org.quartz.dataSource.dataSourceName.user = ${_database.username}
#用于连接你的数据库的密码
org.quartz.dataSource.dataSourceName.password = ${_database.password}
#DataSource 在连接接中创建的最大连接数
org.quartz.dataSource.dataSourceName.maxConnections = 10
#org.quartz.dataSource.dataSourceName.validationQuary =
#一个可选的 SQL 查询字串，DataSource 用它来侦测并替换失败/断开的连接。例如，Oracle 用户可选用 select table_name from user_tables，这个查询应当永远不会失败，除非直的就是连接不上了


